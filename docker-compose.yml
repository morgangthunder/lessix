version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lessix-postgres
    environment:
      POSTGRES_DB: lessix
      POSTGRES_USER: lessix_user
      POSTGRES_PASSWORD: lessix_password
      POSTGRES_MULTIPLE_DATABASES: lessix_dev,lessix_test
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-multiple-databases.sh:/docker-entrypoint-initdb.d/init-multiple-databases.sh
    networks:
      - lessix-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U lessix_user -d lessix"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lessix-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - lessix-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3 Mock)
  minio:
    image: minio/minio:latest
    container_name: lessix-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - lessix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # n8n Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: lessix-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=UTC
      - N8N_DATABASE_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=lessix
      - DB_POSTGRESDB_USER=lessix_user
      - DB_POSTGRESDB_PASSWORD=lessix_password
      - N8N_REDIS_HOST=redis
      - N8N_REDIS_PORT=6379
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - lessix-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend NestJS API
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    container_name: lessix-backend
    environment:
      # Database
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=lessix
      - DATABASE_USERNAME=lessix_user
      - DATABASE_PASSWORD=lessix_password
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      
      # MinIO (S3 Mock)
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin123
      - S3_BUCKET=lessix-content
      - S3_REGION=us-east-1
      
      # n8n Integration
      - N8N_BASE_URL=http://n8n:5678
      - N8N_API_KEY=your-n8n-api-key
      
      # Authentication
      - AUTH_PROVIDER=cognito
      - COGNITO_USER_POOL_ID=us-east-1_XXXXXXXXX
      - COGNITO_CLIENT_ID=your-cognito-client-id
      - COGNITO_REGION=us-east-1
      
      # Multi-tenancy
      - TENANT_ID=default-tenant
      - ACCOUNT_ID=default-account
      - PUBLIC_MODE=false
      
      # Grok API
      - GROK_API_URL=https://api.x.ai/v1
      - GROK_API_KEY=your-grok-api-key
      
      # JWT
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      
      # CORS
      - CORS_ORIGIN=http://localhost:8100,http://localhost:4200
      
      # WebSocket
      - WEBSOCKET_PORT=3001
      
      # Development
      - NODE_ENV=development
      - LOG_LEVEL=debug
    ports:
      - "3000:3000"
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - lessix-network
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Ionic/Angular App
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    container_name: lessix-frontend
    environment:
      # API Configuration
      - API_BASE_URL=http://localhost:3000
      - WEBSOCKET_URL=ws://localhost:3001
      
      # Angular Elements Configuration
      - ACCOUNT_ID=default-account
      - TENANT_ID=default-tenant
      - PUBLIC_MODE=false
      - AUTH_PROVIDER=cognito
      
      # Cognito Configuration
      - COGNITO_USER_POOL_ID=us-east-1_XXXXXXXXX
      - COGNITO_CLIENT_ID=your-cognito-client-id
      - COGNITO_REGION=us-east-1
      
      # n8n Configuration
      - N8N_BASE_URL=http://localhost:5678
      
      # MinIO Configuration
      - S3_ENDPOINT=http://localhost:9000
      - S3_BUCKET=lessix-content
      
      # Development
      - NODE_ENV=development
    ports:
      - "8100:8100"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - lessix-network
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8100"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Pinecone Mock (for local development)
  pinecone-mock:
    image: qdrant/qdrant:latest
    container_name: lessix-pinecone-mock
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - pinecone_data:/qdrant/storage
    networks:
      - lessix-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  n8n_data:
    driver: local
  pinecone_data:
    driver: local

networks:
  lessix-network:
    driver: bridge

